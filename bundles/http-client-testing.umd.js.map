{"version":3,"file":"http-client-testing.umd.js","sources":["../../../../packages/http/client/testing/src/backend.ts","../../../../packages/http/client/testing/index.ts","../../../../packages/http/client/testing/src/request.ts"],"sourcesContent":["import {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/http/client';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {startWith} from 'rxjs/operator/startWith';\n\nimport {HttpTestingController, RequestMatch, RequestMatchFn, VerifyOptions} from './api';\nimport {TestRequest} from './request';\n/**\n * A testing backend for {\\@link HttpClient} which both acts as an {\\@link HttpBackend}\n * and as the {\\@link HttpTestingController}.\n * \n * {\\@link HttpClientTestingBackend} works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n * \n * \\@experimental\n */\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n/**\n * List of pending requests which have not yet been expected.\n */\nprivate open: TestRequest[] = [];\n/**\n * Handle an incoming request by queueing it in the list of open requests.\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      const /** @type {?} */ testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({type: HttpEventType.Sent});\n      return () => { testReq.cancelled = true; };\n    });\n  }\n/**\n * Helper function to search for requests in the list of open requests.\n * @param {?} match\n * @return {?}\n */\nprivate _match(match: string|RequestMatch|RequestMatchFn): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.url === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.url === match.url));\n    }\n  }\n/**\n * Search for requests in the list of open requests, and return all that match\n * without asserting anything about the number of matches.\n * @param {?} match\n * @return {?}\n */\nmatch(match: string|RequestMatch|RequestMatchFn): TestRequest[] {\n    const /** @type {?} */ results = this._match(match);\n    results.forEach(result => {\n      const /** @type {?} */ index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n/**\n * Expect that a single outstanding request matches the given matcher, and return\n * it.\n * \n * Requests returned through this API will no longer be in the list of open requests,\n * and thus will not match twice.\n * @param {?} match\n * @return {?}\n */\nexpectOne(match: string|RequestMatch|RequestMatchFn): TestRequest {\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(`Expected one matching request, found ${matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      throw new Error(`Expected one matching request, found none.`);\n    }\n    return matches[0];\n  }\n/**\n * Expect that no outstanding requests match the given matcher, and throw an error\n * if any do.\n * @param {?} match\n * @return {?}\n */\nexpectNone(match: string|RequestMatch|RequestMatchFn): void {\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(`Expected zero matching requests, found ${matches.length}.`);\n    }\n  }\n/**\n * Validate that there are no outstanding requests.\n * @param {?=} opts\n * @return {?}\n */\nverify(opts: VerifyOptions = {}): void {\n    let /** @type {?} */ open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the URLs of open requests in the error, for convenience.\n      const /** @type {?} */ urls = open.map(testReq => testReq.request.url.split('?')[0]).join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${urls}`);\n    }\n  }\n}\n\nfunction HttpClientTestingBackend_tsickle_Closure_declarations() {\n/**\n * List of pending requests which have not yet been expected.\n * @type {?}\n */\nHttpClientTestingBackend.prototype.open;\n}\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {RequestMatch,VerifyOptions,RequestMatchFn,HttpTestingController,HttpClientTestingBackend,TestResponseBody,FlushOptions,TestRequest} from './public_api';\n","import {HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaders, HttpRequest, HttpResponse, HttpResponseInit} from '@angular/http/client';\nimport {Observer} from 'rxjs/Observer';\n\n/**\n * Type of all possible mock response bodies.\n */\nexport type TestResponseBody =\n    ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[];\n\n/**\n * Options to the flush() interface for responding to requests.\n *\n * @experimental\n */\nexport interface FlushOptions {\n  /**\n   * A set of response headers to include.\n   */\n  headers?: HttpHeaders|{[name: string]: string | string[]};\n\n  /**\n   * HTTP status code of the response (defaults to 200).\n   */\n  status?: number;\n\n  /**\n   * HTTP status text of the response (defaults to 'OK').\n   */\n  statusText?: string;\n}\n/**\n * A mock requests that was received and is ready to be answered.\n * \n * This interface allows access to the underlying {\\@link HttpRequest}, and allows\n * responding with {\\@link HttpEvent}s or {\\@link HttpErrorResponse}s.\n * \n * \\@experimental\n */\nexport class TestRequest {\n/**\n * Whether the request was cancelled after it was sent.\n */\ncancelled = false;\n/**\n * @param {?} request\n * @param {?} observer\n */\nconstructor(public request: HttpRequest<any>,\nprivate observer: Observer<HttpEvent<any>>) {}\n/**\n * @param {?} body\n * @param {?=} opts\n * @return {?}\n */\nflush(body: TestResponseBody|null, opts: FlushOptions = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const /** @type {?} */ url = this.request.url;\n    const /** @type {?} */ headers = new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let /** @type {?} */ statusText: string|undefined = opts.statusText;\n    let /** @type {?} */ status: number = opts.status !== undefined ? opts.status : 200;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    const /** @type {?} */ res: HttpResponseInit<any> = {body, headers, status, statusText, url};\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>(res));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse(res));\n    }\n  }\n/**\n * @param {?} error\n * @param {?=} opts\n * @return {?}\n */\nerror(error: ErrorEvent, opts: FlushOptions = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers: new HttpHeaders(opts.headers),\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.url,\n    }));\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nevent(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\nfunction TestRequest_tsickle_Closure_declarations() {\n/**\n * Whether the request was cancelled after it was sent.\n * @type {?}\n */\nTestRequest.prototype.cancelled;\n/** @type {?} */\nTestRequest.prototype.request;\n/** @type {?} */\nTestRequest.prototype.observer;\n}\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(body: TestResponseBody): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(body: TestResponseBody): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(body: TestResponseBody, format: string = 'JSON'): Object|string|number|\n    (Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(body: TestResponseBody): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(responseType: string, body: TestResponseBody | null): TestResponseBody|\n    null {\n  switch (responseType) {\n    case 'arraybuffer':\n      if (body === null) {\n        return null;\n      }\n      return _toArrayBufferBody(body);\n    case 'blob':\n      if (body === null) {\n        return null;\n      }\n      return _toBlob(body);\n    case 'json':\n      if (body === null) {\n        return 'null';\n      }\n      return _toJsonBody(body);\n    case 'text':\n      if (body === null) {\n        return null;\n      }\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n"],"names":["Observable","HttpHeaders","HttpErrorResponse","HttpResponse"],"mappings":"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"}