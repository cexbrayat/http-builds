{"version":3,"file":"client.es5.js","sources":["../../../../../packages/http/client/src/url_params.ts","../../../../../packages/http/client/src/module.ts","../../../../../packages/http/client/src/xhr.ts","../../../../../packages/http/client/src/jsonp.ts","../../../../../packages/http/client/src/interceptor.ts","../../../../../packages/http/client/src/client.ts","../../../../../packages/http/client/src/response.ts","../../../../../packages/http/client/src/request.ts","../../../../../packages/http/client/src/headers.ts","../../../../../packages/http/client/src/backend.ts"],"sourcesContent":["\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class HttpQueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link ÉµHttpQueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class HttpUrlParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(public rawParams: string = '',\nprivate queryEncoder = /** @type {?} */(( new HttpQueryEncoder() as any))) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): HttpUrlParams {\n    const /** @type {?} */ clone = new HttpUrlParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: HttpUrlParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: HttpUrlParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: HttpUrlParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction HttpUrlParams_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpUrlParams.prototype.paramsMap;\n/** @type {?} */\nHttpUrlParams.prototype.rawParams;\n/** @type {?} */\nHttpUrlParams.prototype.queryEncoder;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, NgModule, Optional} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler} from './interceptor';\nimport {JSONP_HOME, JsonpCallbackMap, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {BrowserXhr, HttpXhrBackend, XhrFactory} from './xhr';\n/**\n * Constructs a {\\@link HttpHandler} that applies a bunch of {\\@link HttpInterceptor}s\n * to a request before passing it to the given {\\@link HttpBackend}.\n * \n * Meant to be used as a factory function within {\\@link HttpClientModule}.\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[] | null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n * \n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n * @return {?}\n */\nexport function jsonpCallbackMap(): Object {\n  let /** @type {?} */ _global: {[key: string]: any};\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\n * {\\@link NgModule} which provides the {\\@link HttpClient} and associated services.\n * \n * Interceptors can be added to the chain behind {\\@link HttpClient} by binding them\n * to the multiprovider for {\\@link HTTP_INTERCEPTORS}.\n */\nexport class HttpClientModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    HttpClient,\n    // HttpHandler is the backend + interceptors and is constructed\n    // using the interceptingHandler factory function.\n    {\n      provide: HttpHandler,\n      useFactory: interceptingHandler,\n      deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n    },\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    BrowserXhr,\n    {provide: XhrFactory, useExisting: BrowserXhr},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientModule.ctorParameters;\n}\n\n/**\n * {\\@link NgModule} which enables JSONP support in {\\@link HttpClient}.\n * \n * Without this module, {\\@link HttpClient#jsonp} requests will reach the backend\n * with method JSONP, where they'll be rejected.\n */\nexport class HttpClientJsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackMap, useFactory: jsonpCallbackMap},\n    {provide: HTTP_INTERCEPTORS, useValue: JsonpInterceptor, multi: true},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpClientJsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClientJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClientJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpMethod, HttpRequest, HttpResponseType} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpResponseInit, HttpUploadProgressEvent} from './response';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @abstract\n */\nexport abstract class XhrFactory {\n/**\n * @abstract\n * @return {?}\n */\nbuild() {} }\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n */\nexport class BrowserXhr implements XhrFactory {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\n/**\n * Tracks a response from the server that does not yet have a body.\n */\ninterface PartialResponse {\n  headers: HttpHeaders;\n  status: number;\n  statusText: string;\n  url: string;\n}\n/**\n * An {\\@link HttpBackend} which uses the XMLHttpRequest API to send\n * requests to a backend server.\n */\nexport class HttpXhrBackend implements HttpBackend {\n/**\n * @param {?} xhrFactory\n */\nconstructor(private xhrFactory: XhrFactory) {}\n/**\n * Process a request and return a stream of response events.\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the JsonpClientModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const /** @type {?} */ xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.url);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((values, name) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const /** @type {?} */ detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        xhr.responseType = /** @type {?} */(( req.responseType.toLowerCase() as any));\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const /** @type {?} */ reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let /** @type {?} */ headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const /** @type {?} */ partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n        const /** @type {?} */ status: number = xhr.status === 1223 ? 204 : xhr.status;\n        const /** @type {?} */ statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const /** @type {?} */ headers = HttpHeaders.fromResponseHeaderString(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const /** @type {?} */ onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let /** @type {?} */ body: any|null = null;\n\n        if (status !== 204) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n\n          // Strip a common XSSI prefix from string responses.\n          // TODO: determine if this behavior should be optional and moved to an interceptor.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? 200 : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let /** @type {?} */ ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (ok && typeof body === 'string' && req.responseType === 'json') {\n          // Attempt the parse. If it fails, a parse error should be delivered to the user.\n          try {\n            body = JSON.parse(body);\n          } catch ( /** @type {?} */error) {\n            // Even though the response status was 2xx, this is still an error.\n            ok = false;\n            // The parse error contains the text of the body that failed to parse.\n            body = /** @type {?} */(( { error, text: body } as HttpJsonParseError));\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const /** @type {?} */ onError = (error: ErrorEvent) => {\n        const /** @type {?} */ res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n      let /** @type {?} */ sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const /** @type {?} */ onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let /** @type {?} */ progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const /** @type {?} */ onUpProgress =\n          (event: ProgressEvent) => {\n            // Upload progress events are simpler. Begin building the progress\n            // event.\n            let /** @type {?} */ progress: HttpUploadProgressEvent = {\n              type: HttpEventType.UploadProgress,\n              loaded: event.loaded,\n            };\n\n            // If the total number of bytes being uploaded is available, include\n            // it.\n            if (event.lengthComputable) {\n              progress.total = event.total;\n            }\n\n            // Send the event.\n            observer.next(progress);\n          }\n\n                                    // By default, register for load and error events.\n                                    xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody);\n      observer.next({type: HttpEventType.Sent});\n\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('load', onLoad);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        xhr.abort();\n      };\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: XhrFactory, },\n];\n}\n\nfunction HttpXhrBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpXhrBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpXhrBackend.ctorParameters;\n/** @type {?} */\nHttpXhrBackend.prototype.xhrFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpInterceptor} from './interceptor';\nimport {HttpMethod, HttpRequest, HttpResponseType} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse} from './response';\n\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet /** @type {?} */ nextRequestId: number = 0;\n\n// All callbacks are namespaced to this property on `window`.\nexport const /** @type {?} */ JSONP_HOME = '__ng__jsonp__';\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const /** @type {?} */ JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n * \n * In the browser, this should always be the `window` object.\n * @abstract\n */\nexport abstract class JsonpCallbackMap { [key: string]: (data: any) => void; }\n/**\n * {\\@link HttpBackend} that only processes {\\@link HttpRequest} with the JSONP method,\n * by performing JSONP style requests.\n */\nexport class JsonpClientBackend implements HttpBackend {\n/**\n * @param {?} callbackMap\n * @param {?} document\n */\nconstructor(private callbackMap: JsonpCallbackMap,\nprivate document: any) {}\n/**\n * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n * @return {?}\n */\nprivate nextCallback(): string { return `ng_jsonp_callback_${nextRequestId++}`; }\n/**\n * Process a JSONP request and return an event stream of the results.\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const /** @type {?} */ callback = this.nextCallback();\n      const /** @type {?} */ url = req.url.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const /** @type {?} */ node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let /** @type {?} */ body: any|null = null;\n\n      // Whether the response callback has been called.\n      let /** @type {?} */ finished: boolean = false;\n\n      // Whether the request has been cancelled (and thus any other callbacks)\n      // should be ignored.\n      let /** @type {?} */ cancelled: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Next, make sure the request wasn't cancelled in the meantime.\n        if (cancelled) {\n          return;\n        }\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const /** @type {?} */ cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const /** @type {?} */ onLoad = (event: Event) => {\n        // Do nothing if the request has been cancelled.\n        if (cancelled) {\n          return;\n        }\n\n        // Cleanup the page.\n        cleanup();\n\n        // Check whether the response callback has run.\n        if (!finished) {\n          // It hasn't, something went wrong with the request. Return an error via\n          // the Observable error path. All JSONP errors have status 0.\n          observer.error(new HttpErrorResponse({\n            url,\n            status: 0,\n            statusText: 'JSONP Error',\n            error: new Error(JSONP_ERR_NO_CALLBACK),\n          }));\n          return;\n        }\n\n        // Success. body either contains the response body or null if none was\n        // returned.\n        observer.next(new HttpResponse({\n          body,\n          status: 200,\n          statusText: 'OK', url,\n        }));\n\n        // Complete the stream, the resposne is over.\n        observer.complete();\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const /** @type {?} */ onError: any = (error: Error) => {\n        // If the request was already cancelled, no need to emit anything.\n        if (cancelled) {\n          return;\n        }\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error', url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        // Track the cancellation so event listeners won't do anything even if already scheduled.\n        cancelled = true;\n\n        // Remove the event listeners so they won't run if the events later fire.\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JsonpCallbackMap, },\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction JsonpClientBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpClientBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpClientBackend.ctorParameters;\n/** @type {?} */\nJsonpClientBackend.prototype.callbackMap;\n/** @type {?} */\nJsonpClientBackend.prototype.document;\n}\n\n/**\n * An {\\@Link HttpInterceptor} which identifies requests with the method JSONP and\n * shifts them to the {\\@link JsonpClientBackend}.\n */\nexport class JsonpInterceptor {\n/**\n * @param {?} jsonp\n */\nconstructor(private jsonp: JsonpClientBackend) {}\n/**\n * @param {?} req\n * @param {?} next\n * @return {?}\n */\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.method === 'JSONP') {\n      return this.jsonp.handle( /** @type {?} */((req as HttpRequest<never>)));\n    }\n    // Fall through for normal HTTP requests.\n    return next.handle(req);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JsonpClientBackend, },\n];\n}\n\nfunction JsonpInterceptor_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpInterceptor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpInterceptor.ctorParameters;\n/** @type {?} */\nJsonpInterceptor.prototype.jsonp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n/**\n * Intercepts {@link HttpRequest}s and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n */\nexport interface HttpInterceptor {\n  /**\n   * Intercept an outgoing {@link HttpRequest} and optionally transform it or the\n   * response.\n   *\n   * Typically an interceptor will transform the outgoing request before returning\n   * `next.handle(transformedReq)`. An interceptor may choose to transform the\n   * response event stream as well, by applying additional Rx operators on the stream\n   * returned by `next.handle()`.\n   *\n   * More rarely, an interceptor may choose to completely handle the request itself,\n   * and compose a new event stream instead of invoking `next.handle()`. This is\n   * acceptable behavior, but keep in mind further interceptors will be skipped entirely.\n   *\n   * It is also rare but valid for an interceptor to return multiple responses on the\n   * event stream for a single request.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n/**\n * {\\@link HttpHandler} which applies an {\\@link HttpInterceptor} to an {\\@link HttpRequest}.\n */\nexport class HttpInterceptorHandler implements HttpHandler {\n/**\n * @param {?} next\n * @param {?} interceptor\n */\nconstructor(private next: HttpHandler,\nprivate interceptor: HttpInterceptor) {}\n/**\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\nfunction HttpInterceptorHandler_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpInterceptorHandler.prototype.next;\n/** @type {?} */\nHttpInterceptorHandler.prototype.interceptor;\n}\n\n/**\n * A multi-provider token which represents the array of {\\@link HttpInterceptor}s that\n * are registered.\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {of } from 'rxjs/observable/of';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {filter} from 'rxjs/operator/filter';\nimport {map} from 'rxjs/operator/map';\n\nimport {HttpHandler} from './backend';\nimport * as types from './client_types';\nimport {HttpHeaders} from './headers';\nimport {HttpMethod, HttpRequest, HttpResponseType} from './request';\nimport {HttpEvent, HttpEventType, HttpResponse} from './response';\nimport {HttpUrlParams} from './url_params';\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody<T>(options: types.HttpMethodOptions, body: T | null): types.HttpRequestOptions<T> {\n  return {\n    body,\n    headers: options.headers,\n    observe: options.observe,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\nexport class HttpClient {\n/**\n * @param {?} handler\n */\nconstructor(private handler: HttpHandler) {}\n\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveArrayBufferBody<any>): Observable<ArrayBuffer>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveBlobBody<any>): Observable<Blob>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveTextBody<any>): Observable<string>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveArrayBufferEvents<any>):\n      Observable<HttpEvent<ArrayBuffer>>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveBlobEvents<any>): Observable<HttpEvent<Blob>>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveTextEvents<any>): Observable<HttpEvent<string>>;\n  request<R>(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveEvents<any>): Observable<HttpEvent<R>>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveArrayBufferResponse<any>):\n      Observable<HttpResponse<ArrayBuffer>>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveBlobResponse<any>): Observable<HttpResponse<Blob>>;\n  request(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveTextResponse<any>): Observable<HttpResponse<string>>;\n  request<R>(\n      url: string, method: HttpMethod|string,\n      options: types.zHttpRequestOptionsObserveResponse<any>): Observable<HttpResponse<R>>;\n  request(url: string, method: HttpMethod|string, options?: types.HttpRequestOptions<any>):\n      Observable<Object>;\n  request<R>(url: string, method: HttpMethod|string, options?: types.HttpRequestOptions<any>):\n      Observable<R>;\n/**\n * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n * fires the request through the chain of registered interceptors and on to the\n * server.\n * \n * This method can be called in one of two ways. Either a {\\@link HttpRequest}\n * instance can be passed directly as the only parameter, or a string URL can be\n * passed as the first parameter, a method optionally as the second, and an\n * options hash as the third.\n * \n * If a {\\@link HttpRequest} object is passed directly, an `Observable` of the\n * raw {\\@link HttpEvent} stream will be returned.\n * \n * If a request is instead built by providing a URL, the options object\n * determines the return type of `request()`. In addition to configuring\n * request parameters such as the outgoing headers and/or the body, the options\n * hash specifies two key pieces of information about the request: the\n * `responseType` and what to `observe`.\n * \n * The `responseType` value determines how a successful response body will be\n * parsed. If `responseType` is the default `json`, a type interface for the\n * resulting object may be passed as a type parameter to `request()`.\n * \n * The `observe` value determines the return type of `request()`, based on what\n * the consumer is interested in observing. A value of `events` will return an\n * `Observable<HttpEvent>` representing the raw {\\@link HttpEvent} stream,\n * including progress events by default. A value of `response` will return an\n * `Observable<HttpResponse<T>>` where the `T` parameter of `{\\@link HttpResponse}\n * depends on the `responseType` and any optionally provided type parameter.\n * A value of `body` will return an `Observable<T>` with the same `T` body type.\n * @param {?} first\n * @param {?=} method\n * @param {?=} options\n * @return {?}\n */\nrequest(\n      first: string|HttpRequest<any>, method?: HttpMethod|string,\n      options: types.HttpRequestOptions<any> = {}): Observable<any> {\n    let /** @type {?} */ req: HttpRequest<any>;\n    // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = /** @type {?} */(( first as HttpRequest<any>));\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming GET unless a method is\n      // provided.\n      req = new HttpRequest(first, /** @type {?} */(( method)), options.body || null, {\n        headers: options.headers,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const /** @type {?} */ events$: Observable<HttpEvent<any>> =\n        concatMap.call(of (req), (req: HttpRequest<any>) => this.handler.handle(req));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const /** @type {?} */ res$: Observable<HttpResponse<any>> =\n        filter.call(events$, (event: HttpEvent<any>) => event instanceof HttpResponse);\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return map.call(res$, (res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            });\n          case 'blob':\n            return map.call(res$, (res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            });\n          case 'text':\n            return map.call(res$, (res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            });\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return map.call(res$, (res: HttpResponse<any>) => res.body);\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  delete (url: string, options: types.zHttpMethodOptionsObserveArrayBufferBody):\n      Observable<ArrayBuffer>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveBlobBody): Observable<Blob>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveTextBody): Observable<string>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveArrayBufferEvents):\n      Observable<HttpEvent<ArrayBuffer>>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveBlobEvents):\n      Observable<HttpEvent<Blob>>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveTextEvents):\n      Observable<HttpEvent<string>>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveEvents):\n      Observable<HttpEvent<Object>>;\n  delete<T>(url: string, options: types.zHttpMethodOptionsObserveEvents): Observable<HttpEvent<T>>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveArrayBufferResponse):\n      Observable<HttpResponse<ArrayBuffer>>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveBlobResponse):\n      Observable<HttpResponse<Blob>>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveTextResponse):\n      Observable<HttpResponse<string>>;\n  delete (url: string, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<Object>>;\n  delete<T>(url: string, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<T>>;\n  delete (url: string, options?: types.HttpMethodOptions): Observable<Object>;\n  delete<T>(url: string, options?: types.HttpMethodOptions): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause the configured\n * DELETE request to be executed on the server. See {\\@link HttpClient#request} for\n * details of `delete()`'s return type based on the provided options.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options: types.HttpMethodOptions = {}): Observable<any> {\n    return this.request<any>(url, 'DELETE', options);\n  }\n\n  get(url: string,\n      options: types.zHttpMethodOptionsObserveArrayBufferBody): Observable<ArrayBuffer>;\n  get(url: string, options: types.zHttpMethodOptionsObserveBlobBody): Observable<Blob>;\n  get(url: string, options: types.zHttpMethodOptionsObserveTextBody): Observable<string>;\n  get(url: string, options: types.zHttpMethodOptionsObserveArrayBufferEvents):\n      Observable<HttpEvent<ArrayBuffer>>;\n  get(url: string, options: types.zHttpMethodOptionsObserveBlobEvents): Observable<HttpEvent<Blob>>;\n  get(url: string,\n      options: types.zHttpMethodOptionsObserveTextEvents): Observable<HttpEvent<string>>;\n  get(url: string, options: types.zHttpMethodOptionsObserveEvents): Observable<HttpEvent<Object>>;\n  get<T>(url: string, options: types.zHttpMethodOptionsObserveEvents): Observable<HttpEvent<T>>;\n  get(url: string, options: types.zHttpMethodOptionsObserveArrayBufferResponse):\n      Observable<HttpResponse<ArrayBuffer>>;\n  get(url: string,\n      options: types.zHttpMethodOptionsObserveBlobResponse): Observable<HttpResponse<Blob>>;\n  get(url: string,\n      options: types.zHttpMethodOptionsObserveTextResponse): Observable<HttpResponse<string>>;\n  get(url: string,\n      options: types.zHttpMethodOptionsObserveResponse): Observable<HttpResponse<Object>>;\n  get<T>(url: string, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<T>>;\n  get(url: string, options?: types.HttpMethodOptions): Observable<Object>;\n  get<T>(url: string, options?: types.HttpMethodOptions): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause the configured\n * GET request to be executed on the server. See {\\@link HttpClient#request} for\n * details of `get()`'s return type based on the provided options.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options: types.HttpMethodOptions = {}): Observable<any> {\n    return this.request<any>(url, 'GET', options);\n  }\n\n  head(url: string, options: types.zHttpMethodOptionsObserveArrayBufferBody):\n      Observable<ArrayBuffer>;\n  head(url: string, options: types.zHttpMethodOptionsObserveBlobBody): Observable<Blob>;\n  head(url: string, options: types.zHttpMethodOptionsObserveTextBody): Observable<string>;\n  head(url: string, options: types.zHttpMethodOptionsObserveArrayBufferEvents):\n      Observable<HttpEvent<ArrayBuffer>>;\n  head(url: string, options: types.zHttpMethodOptionsObserveBlobEvents):\n      Observable<HttpEvent<Blob>>;\n  head(url: string, options: types.zHttpMethodOptionsObserveTextEvents):\n      Observable<HttpEvent<string>>;\n  head(url: string, options: types.zHttpMethodOptionsObserveEvents): Observable<HttpEvent<Object>>;\n  head<T>(url: string, options: types.zHttpMethodOptionsObserveEvents): Observable<HttpEvent<T>>;\n  head(url: string, options: types.zHttpMethodOptionsObserveArrayBufferResponse):\n      Observable<HttpResponse<ArrayBuffer>>;\n  head(url: string, options: types.zHttpMethodOptionsObserveBlobResponse):\n      Observable<HttpResponse<Blob>>;\n  head(url: string, options: types.zHttpMethodOptionsObserveTextResponse):\n      Observable<HttpResponse<string>>;\n  head(url: string, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<Object>>;\n  head<T>(url: string, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<T>>;\n  head(url: string, options?: types.HttpMethodOptions): Observable<Object>;\n  head<T>(url: string, options?: types.HttpMethodOptions): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause the configured\n * HEAD request to be executed on the server. See {\\@link HttpClient#request} for\n * details of `head()`'s return type based on the provided options.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options: types.HttpMethodOptions = {}): Observable<any> {\n    return this.request<any>(url, 'HEAD', options);\n  }\n\n  jsonp(url: string): Observable<any>;\n  jsonp<T>(url: string): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause a request\n * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n * \n * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n * If no such interceptor is reached, then the `JSONP` request will likely be\n * rejected by the configured backend.\n * @template T\n * @param {?} url\n * @return {?}\n */\njsonp<T>(url: string): Observable<T> {\n    return this.request<any>(url, 'JSONP', {\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  options(url: string, options: types.zHttpMethodOptionsObserveArrayBufferBody):\n      Observable<ArrayBuffer>;\n  options(url: string, options: types.zHttpMethodOptionsObserveBlobBody): Observable<Blob>;\n  options(url: string, options: types.zHttpMethodOptionsObserveTextBody): Observable<string>;\n  options(url: string, options: types.zHttpMethodOptionsObserveArrayBufferEvents):\n      Observable<HttpEvent<ArrayBuffer>>;\n  options(url: string, options: types.zHttpMethodOptionsObserveBlobEvents):\n      Observable<HttpEvent<Blob>>;\n  options(url: string, options: types.zHttpMethodOptionsObserveTextEvents):\n      Observable<HttpEvent<string>>;\n  options(url: string, options: types.zHttpMethodOptionsObserveEvents):\n      Observable<HttpEvent<Object>>;\n  options<T>(url: string, options: types.zHttpMethodOptionsObserveEvents): Observable<HttpEvent<T>>;\n  options(url: string, options: types.zHttpMethodOptionsObserveArrayBufferResponse):\n      Observable<HttpResponse<ArrayBuffer>>;\n  options(url: string, options: types.zHttpMethodOptionsObserveBlobResponse):\n      Observable<HttpResponse<Blob>>;\n  options(url: string, options: types.zHttpMethodOptionsObserveTextResponse):\n      Observable<HttpResponse<string>>;\n  options(url: string, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<Object>>;\n  options<T>(url: string, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<T>>;\n  options(url: string, options?: types.HttpMethodOptions): Observable<Object>;\n  options<T>(url: string, options?: types.HttpMethodOptions): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause the configured\n * OPTIONS request to be executed on the server. See {\\@link HttpClient#request} for\n * details of `options()`'s return type based on the provided options.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options: types.HttpMethodOptions = {}): Observable<any> {\n    return this.request<any>(url, 'OPTIONS', options);\n  }\n\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferBody):\n      Observable<ArrayBuffer>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveBlobBody):\n      Observable<Blob>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveTextBody):\n      Observable<string>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferEvents):\n      Observable<HttpEvent<ArrayBuffer>>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveBlobEvents):\n      Observable<HttpEvent<Blob>>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveTextEvents):\n      Observable<HttpEvent<string>>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveEvents):\n      Observable<HttpEvent<Object>>;\n  patch<T>(url: string, body: any|null, options: types.zHttpMethodOptionsObserveEvents):\n      Observable<HttpEvent<T>>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferResponse):\n      Observable<HttpResponse<ArrayBuffer>>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveBlobResponse):\n      Observable<HttpResponse<Blob>>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveTextResponse):\n      Observable<HttpResponse<string>>;\n  patch(url: string, body: any|null, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<Object>>;\n  patch<T>(url: string, body: any|null, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<T>>;\n  patch(url: string, body: any|null, options?: types.HttpMethodOptions): Observable<Object>;\n  patch<T>(url: string, body: any|null, options?: types.HttpMethodOptions): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause the configured\n * PATCH request to be executed on the server. See {\\@link HttpClient#request} for\n * details of `patch()`'s return type based on the provided options.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any|null, options: types.HttpMethodOptions = {}): Observable<any> {\n    return this.request<any>(url, 'PATCH', addBody(options, body));\n  }\n\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferBody):\n      Observable<ArrayBuffer>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveBlobBody):\n      Observable<Blob>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveTextBody):\n      Observable<string>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferEvents):\n      Observable<HttpEvent<ArrayBuffer>>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveBlobEvents):\n      Observable<HttpEvent<Blob>>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveTextEvents):\n      Observable<HttpEvent<string>>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveEvents):\n      Observable<HttpEvent<Object>>;\n  post<T>(url: string, body: any|null, options: types.zHttpMethodOptionsObserveEvents):\n      Observable<HttpEvent<T>>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferResponse):\n      Observable<HttpResponse<ArrayBuffer>>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveBlobResponse):\n      Observable<HttpResponse<Blob>>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveTextResponse):\n      Observable<HttpResponse<string>>;\n  post(url: string, body: any|null, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<Object>>;\n  post<T>(url: string, body: any|null, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<T>>;\n  post(url: string, body: any|null, options?: types.HttpMethodOptions): Observable<Object>;\n  post<T>(url: string, body: any|null, options?: types.HttpMethodOptions): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause the configured\n * POST request to be executed on the server. See {\\@link HttpClient#request} for\n * details of `post()`'s return type based on the provided options.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any|null, options: types.HttpMethodOptions = {}): Observable<any> {\n    return this.request<any>(url, 'POST', addBody(options, body));\n  }\n\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveArrayBufferBody): Observable<ArrayBuffer>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveBlobBody): Observable<Blob>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveTextBody): Observable<string>;\n  put(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferEvents):\n      Observable<HttpEvent<ArrayBuffer>>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveBlobEvents): Observable<HttpEvent<Blob>>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveTextEvents): Observable<HttpEvent<string>>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveEvents): Observable<HttpEvent<Object>>;\n  put<T>(url: string, body: any|null, options: types.zHttpMethodOptionsObserveEvents):\n      Observable<HttpEvent<T>>;\n  put(url: string, body: any|null, options: types.zHttpMethodOptionsObserveArrayBufferResponse):\n      Observable<HttpResponse<ArrayBuffer>>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveBlobResponse): Observable<HttpResponse<Blob>>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveTextResponse): Observable<HttpResponse<string>>;\n  put(url: string, body: any|null,\n      options: types.zHttpMethodOptionsObserveResponse): Observable<HttpResponse<Object>>;\n  put<T>(url: string, body: any|null, options: types.zHttpMethodOptionsObserveResponse):\n      Observable<HttpResponse<T>>;\n  put(url: string, body: any|null, options?: types.HttpMethodOptions): Observable<Object>;\n  put<T>(url: string, body: any|null, options?: types.HttpMethodOptions): Observable<T>;\n/**\n * Constructs an `Observable` which, when subscribed, will cause the configured\n * POST request to be executed on the server. See {\\@link HttpClient#request} for\n * details of `post()`'s return type based on the provided options.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any|null, options: types.HttpMethodOptions = {}): Observable<any> {\n    return this.request<any>(url, 'PUT', addBody(options, body));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpHandler, },\n];\n}\n\nfunction HttpClient_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpClient.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpClient.ctorParameters;\n/** @type {?} */\nHttpClient.prototype.handler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {empty} from 'rxjs/observable/empty';\n\nimport {HttpHeaders} from './headers';\nexport type HttpEventType = number;\nexport let HttpEventType: any = {};\nHttpEventType.Sent = 0;\nHttpEventType.UploadProgress = 1;\nHttpEventType.ResponseHeader = 2;\nHttpEventType.DownloadProgress = 3;\nHttpEventType.Response = 4;\nHttpEventType.User = 5;\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n\n\n/**\n * Base interface for progress events.\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n */\nexport interface HttpSentEvent { type: HttpEventType.Sent; }\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n */\nexport interface HttpUserEvent<T> { type: HttpEventType.User; }\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n */\nexport interface HttpJsonParseError { error: Error, text: string, }\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n */\nexport type HttpEvent<T> =\n    HttpSentEvent | HttpHeaderResponse | HttpResponse<T>| HttpProgressEvent | HttpUserEvent<T>;\n\n/**\n * Initialization hash for only those fields of the response which are available\n * before the body downloads.\n */\nexport interface HttpResponseHeaderInit {\n  headers?: HttpHeaders;\n  status?: number;\n  statusText?: string;\n  url?: string;\n}\n\n/**\n * Initialization hash for the full response, including a typed body.\n */\nexport interface HttpResponseInit<T> extends HttpResponseHeaderInit { body?: T; }\n\n/**\n * Initialization hash for an error response, including an untyped error.\n */\nexport interface HttpErrorResponseInit extends HttpResponseHeaderInit { error?: any; }\n/**\n * Base class for both {\\@link HttpResponse} and {\\@link HttpHeaderResponse}.\n * @abstract\n */\nexport abstract class HttpResponseBase {\n/**\n * All response headers.\n */\nreadonly headers: HttpHeaders;\n/**\n * Response status code.\n */\nreadonly status: number;\n/**\n * Textual description of response status code.\n * \n * Do not depend on this.\n */\nreadonly statusText: string;\n/**\n * URL of the resource retrieved, or null if not available.\n */\nreadonly url: string|null;\n/**\n * Whether the status code falls in the 2xx range.\n */\nreadonly ok: boolean;\n/**\n * Type of the response, narrowed to either the full response or the header.\n */\nreadonly type: HttpEventType.Response|HttpEventType.ResponseHeader;\n/**\n * Super-constructor for all responses.\n * \n * The single parameter accepted is an initialization hash. Any properties\n * of the response passed there will override the default values.\n * @param {?} init\n * @param {?=} defaultStatus\n * @param {?=} defaultStatusText\n */\nconstructor(\n      init: HttpResponseHeaderInit, defaultStatus: number = 200, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n\n    // Seal the headers so they can't be further mutated.\n    this.headers.seal();\n  }\n}\n\nfunction HttpResponseBase_tsickle_Closure_declarations() {\n/**\n * All response headers.\n * @type {?}\n */\nHttpResponseBase.prototype.headers;\n/**\n * Response status code.\n * @type {?}\n */\nHttpResponseBase.prototype.status;\n/**\n * Textual description of response status code.\n * \n * Do not depend on this.\n * @type {?}\n */\nHttpResponseBase.prototype.statusText;\n/**\n * URL of the resource retrieved, or null if not available.\n * @type {?}\n */\nHttpResponseBase.prototype.url;\n/**\n * Whether the status code falls in the 2xx range.\n * @type {?}\n */\nHttpResponseBase.prototype.ok;\n/**\n * Type of the response, narrowed to either the full response or the header.\n * @type {?}\n */\nHttpResponseBase.prototype.type;\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n * \n * {\\@link HttpHeaderResponse} is a {\\@link HttpEvent} available on the response\n * event stream, only when progress events are requested.\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n/**\n * Create a new {\\@link HttpHeaderResponse} with the given parameters.\n * @param {?=} init\n */\nconstructor(init: HttpResponseHeaderInit = {}) { super(init); }\n\n  readonly type = HttpEventType.ResponseHeader;\n/**\n * Copy this {\\@link HttpHeaderResponse}, overriding its contents with the\n * given parameter hash.\n * @param {?=} update\n * @return {?}\n */\nclone(update: HttpResponseHeaderInit = {}): HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    })\n  }\n}\n\nfunction HttpHeaderResponse_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpHeaderResponse.prototype.type;\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n * \n * {\\@link HttpResponse} is a {\\@link HttpEvent} available on the response event\n * stream.\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n/**\n * The response body, or `null` if one was not returned.\n */\nreadonly body: T|null;\n/**\n * Construct a new {\\@link HttpResponse}.\n * @param {?=} init\n */\nconstructor(init: HttpResponseInit<T> = {}) {\n    super(init);\n    this.body = init.body || null;\n  }\n\n  readonly type = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: HttpResponseHeaderInit): HttpResponse<T>;\n  clone<V>(update: HttpResponseInit<V>): HttpResponse<V>;\n/**\n * @param {?=} update\n * @return {?}\n */\nclone(update: HttpResponseInit<any> = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers.clone(),\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\nfunction HttpResponse_tsickle_Closure_declarations() {\n/**\n * The response body, or `null` if one was not returned.\n * @type {?}\n */\nHttpResponse.prototype.body;\n/** @type {?} */\nHttpResponse.prototype.type;\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n * \n * Any error returned on the {\\@link Observable} response stream will be\n * wrapped in an {\\@link HttpErrorResponse} to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n/**\n * Errors are never okay, even when the status code is in the 2xx success range.\n */\nreadonly ok = false;\n/**\n * @param {?} init\n */\nconstructor(init: HttpErrorResponseInit) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message =\n          `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\nfunction HttpErrorResponse_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpErrorResponse.prototype.name;\n/** @type {?} */\nHttpErrorResponse.prototype.message;\n/** @type {?} */\nHttpErrorResponse.prototype.error;\n/**\n * Errors are never okay, even when the status code is in the 2xx success range.\n * @type {?}\n */\nHttpErrorResponse.prototype.ok;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {HttpHeaders} from './headers';\nimport {HttpUrlParams} from './url_params';\n\n/**\n * Represents an HTTP request body when serialized for the server.\n */\nexport type HttpSerializedBody = ArrayBuffer | Blob | FormData | string;\n\n/**\n * A subset of the allowed values for `XMLHttpRequest.responseType` supported by\n * {@link HttpClient}.\n */\nexport type HttpResponseType = 'arraybuffer' | 'blob' | 'json' | 'text';\n\n/**\n * A type capturing HTTP methods which don't take request bodies.\n */\nexport type HttpNoBodyMethod = 'DELETE' | 'GET' | 'HEAD' | 'JSONP' | 'OPTIONS';\n\n/**\n * A type capturing HTTP methods which do take request bodies.\n */\nexport type HttpBodyMethod = 'POST' | 'PUT' | 'PATCH';\n\n/**\n * A type representing all (known) HTTP methods.\n */\nexport type HttpMethod = HttpBodyMethod | HttpNoBodyMethod;\n\n/**\n * Construction interface for {@link HttpRequest}s.\n *\n * All values are optional and will override default values if provided.\n */\nexport interface HttpRequestInit {\n  headers?: HttpHeaders;\n  reportProgress?: boolean;\n  responseType?: HttpResponseType;\n  withCredentials?: boolean;\n}\n\n/**\n * Cloning interface for {@link HttpRequestClone}.\n *\n * All values are optional and will be cloned from the base request if not\n * provided.\n */\nexport interface HttpRequestClone<T> extends HttpRequestInit {\n  body?: T|null;\n  method?: HttpMethod|string;\n  url?: string;\n  setHeaders?: {[name: string]: string | string[]};\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n * \n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n * \n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n * \n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n * \n * {\\@link HttpRequest} represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a {\\@link HttpRequest}, the {\\@link HttpRequest#clone}\n * method should be used.\n */\nexport class HttpRequest<T> {\n/**\n * The request body, or `null` if one isn't set.\n * \n * Bodies are not enforced to be immutable, as they can include a reference to any\n * user-defined data type. However, interceptors should take care to preserve\n * idempotence by treating them as such.\n */\nreadonly body: T|null = null;\n/**\n * Outgoing headers for this request.\n */\nreadonly headers: HttpHeaders;\n/**\n * Whether this request should be made in a way that exposes progress events.\n * \n * Progress events are expensive (change detection runs on each event) and so\n * they should only be requested if the consumer intends to monitor them.\n */\nreadonly reportProgress: boolean = false;\n/**\n * Whether this request should be sent with outgoing credentials (cookies).\n */\nreadonly withCredentials: boolean = false;\n/**\n * The expected response type of the server.\n * \n * This is used to parse the response appropriately before returning it to\n * the requestee.\n */\nreadonly responseType: HttpResponseType = 'json';\n/**\n * The outgoing HTTP request method.\n */\nreadonly method: string;\n/**\n * @param {?} url\n */\nconstructor(url: string);\n/**\n * @param {?} url\n * @param {?} method\n * @param {?=} init\n */\nconstructor(url: string, method: HttpNoBodyMethod, init?: HttpRequestInit);\n/**\n * @param {?} url\n * @param {?} method\n * @param {?} body\n * @param {?=} init\n */\nconstructor(url: string, method: HttpBodyMethod, body: T|null, init?: HttpRequestInit);\n/**\n * @param {?} url\n * @param {?} method\n * @param {?} body\n * @param {?=} init\n */\nconstructor(url: string, method: HttpMethod|string, body: T|null, init?: HttpRequestInit);\n/**\n * @param {?} url\n * @param {?=} method\n * @param {?=} third\n * @param {?=} fourth\n */\nconstructor(\npublic readonly url: string, method?: string, third?: T|HttpRequestInit|null,\n      fourth?: HttpRequestInit) {\n    // Assume GET unless otherwise specified, and normalize the request method.\n    this.method = (method || 'GET').toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third as T || null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // In any case, seal the headers so no changes are allowed.\n    this.headers.seal();\n  }\n/**\n * Transform the free-form body into a serialized format suitable for\n * transmission to the server.\n * @return {?}\n */\nserializeBody(): HttpSerializedBody|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return ( /** @type {?} */((this.body as any))).toString();\n  }\n/**\n * Examine the body and attempt to infer an appropriate MIME type\n * for it.\n * \n * If no such type can be inferred, this method will return `null`.\n * @return {?}\n */\ndetectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData instances are URL encoded on the wire.\n    if (isFormData(this.body)) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // Arrays, objects, and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        Array.isArray(this.body)) {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: HttpRequestInit): HttpRequest<T>;\n  clone<V>(update: HttpRequestClone<V>): HttpRequest<V>;\n/**\n * @param {?=} update\n * @return {?}\n */\nclone(update: HttpRequestClone<any> = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const /** @type {?} */ method = update.method || this.method;\n    const /** @type {?} */ url = update.url || this.url;\n    const /** @type {?} */ responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const /** @type {?} */ withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const /** @type {?} */ reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers may need to be cloned later if they're sealed, but being\n    // appended to.\n    let /** @type {?} */ headers = update.headers || this.headers;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Adding extra headers. If the current headers are sealed, they need to\n      // be cloned to unseal them first.\n      if (headers.sealed) {\n        headers = headers.clone();\n      }\n\n      // Set every requested header.\n      Object.keys(update.setHeaders)\n          .forEach(header => headers.set(header, /** @type {?} */(( update.setHeaders))[header]));\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(\n        url, method, body, {\n                               headers, reportProgress, responseType, withCredentials,\n                           });\n  }\n}\n\nfunction HttpRequest_tsickle_Closure_declarations() {\n/**\n * The request body, or `null` if one isn't set.\n * \n * Bodies are not enforced to be immutable, as they can include a reference to any\n * user-defined data type. However, interceptors should take care to preserve\n * idempotence by treating them as such.\n * @type {?}\n */\nHttpRequest.prototype.body;\n/**\n * Outgoing headers for this request.\n * @type {?}\n */\nHttpRequest.prototype.headers;\n/**\n * Whether this request should be made in a way that exposes progress events.\n * \n * Progress events are expensive (change detection runs on each event) and so\n * they should only be requested if the consumer intends to monitor them.\n * @type {?}\n */\nHttpRequest.prototype.reportProgress;\n/**\n * Whether this request should be sent with outgoing credentials (cookies).\n * @type {?}\n */\nHttpRequest.prototype.withCredentials;\n/**\n * The expected response type of the server.\n * \n * This is used to parse the response appropriately before returning it to\n * the requestee.\n * @type {?}\n */\nHttpRequest.prototype.responseType;\n/**\n * The outgoing HTTP request method.\n * @type {?}\n */\nHttpRequest.prototype.method;\n}\n\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const HTTP_HEADERS_SEALED_ERR = 'Headers have been sealed and cannot be mutated.';\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class HttpHeaders {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\nprivate _lazyInit: Function|null = null;\n/**\n * \\@internal\n */\nsealed: boolean = false;\n/**\n * @param {?=} headers\n */\nconstructor(headers?: HttpHeaders|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof HttpHeaders) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): HttpHeaders {\n    const /** @type {?} */ headers = new HttpHeaders();\n\n    headers._lazyInit = () => {\n      headersString.split('\\n').forEach(line => {\n        const /** @type {?} */ index = line.indexOf(':');\n        if (index > 0) {\n          const /** @type {?} */ name = line.slice(0, index);\n          const /** @type {?} */ value = line.slice(index + 1).trim();\n          headers.set(name, value);\n        }\n      });\n    };\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    this.ensureInitialized();\n    if (this.sealed) {\n      throw new Error(HTTP_HEADERS_SEALED_ERR);\n    }\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    this.ensureInitialized();\n    if (this.sealed) {\n      throw new Error(HTTP_HEADERS_SEALED_ERR);\n    }\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string, headers: Map<string, string[]>) => void): void {\n    this.ensureInitialized();\n    this._headers.forEach(\n        (values, lcName) => fn(values, /** @type {?} */(( this._normalizedNames.get(lcName))), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    this.ensureInitialized();\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean {\n    this.ensureInitialized();\n    return this._headers.has(name.toLowerCase());\n  }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] {\n    this.ensureInitialized();\n    return Array.from(this._normalizedNames.values());\n  }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    this.ensureInitialized();\n    if (this.sealed) {\n      throw new Error(HTTP_HEADERS_SEALED_ERR);\n    }\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] {\n    this.ensureInitialized();\n    return Array.from(this._headers.values());\n  }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    this.ensureInitialized();\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[ /** @type {?} */((this._normalizedNames.get(name)))] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    this.ensureInitialized();\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on ÉµHttpHeaders class'); }\n/**\n * @return {?}\n */\nclone(): HttpHeaders {\n    const /** @type {?} */ clone = new HttpHeaders();\n    this.forEach((values, name) => { clone.set(name, values); });\n    return clone;\n  }\n/**\n * \\@internal\n * @return {?}\n */\nseal(): void { this.sealed = true; }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n/**\n * @return {?}\n */\nprivate ensureInitialized(): void {\n    if (this._lazyInit !== null) {\n      // Set _lazyInit to null first, otherwise lazy initialization\n      // may attempt to call other HttpHeaders methods which will\n      // call ensureInitialized() again.\n      const /** @type {?} */ init = this._lazyInit;\n      this._lazyInit = null;\n      // At the same time, save the sealing state and unseal for the initialization.\n      const /** @type {?} */ sealed = this.sealed;\n      this.sealed = false;\n      init();\n      // Restore sealed state.\n      this.sealed = sealed;\n    }\n  }\n}\n\nfunction HttpHeaders_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHttpHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHttpHeaders.prototype._normalizedNames;\n/** @type {?} */\nHttpHeaders.prototype._lazyInit;\n/**\n * \\@internal\n * @type {?}\n */\nHttpHeaders.prototype.sealed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {HttpRequest, HttpSerializedBody} from './request';\nimport {HttpEvent} from './response';\n/**\n * @abstract\n */\nexport abstract class HttpHandler {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>) {}\n}\n/**\n * @abstract\n */\nexport abstract class HttpBackend implements HttpHandler {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>) {}\n}\n"],"names":["map"],"mappings":"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"}