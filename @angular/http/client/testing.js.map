{"version":3,"file":"testing.js","sources":["../../../../../../packages/http/client/testing/index.ts","../../../../../../packages/http/client/testing/src/backend.ts","../../../../../../packages/http/client/testing/src/request.ts","../../../../../../packages/http/client/testing/src/api.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {RequestMatch,VerifyOptions,RequestMatchFn,HttpTestingController,HttpClientTestingBackend,TestResponseBody,FlushOptions,TestRequest} from './public_api';\n","import {HttpBackend, HttpEvent, HttpEventType, HttpRequest} from '@angular/http/client';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {startWith} from 'rxjs/operator/startWith';\n\nimport {HttpTestingController, RequestMatch, RequestMatchFn, VerifyOptions} from './api';\nimport {TestRequest} from './request';\n/**\n * A testing backend for {\\@link HttpClient} which both acts as an {\\@link HttpBackend}\n * and as the {\\@link HttpTestingController}.\n * \n * {\\@link HttpClientTestingBackend} works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n * \n * \\@experimental\n */\nexport class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\n/**\n * List of pending requests which have not yet been expected.\n */\nprivate open: TestRequest[] = [];\n/**\n * Handle an incoming request by queueing it in the list of open requests.\n * @param {?} req\n * @return {?}\n */\nhandle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      const /** @type {?} */ testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({type: HttpEventType.Sent});\n      return () => { testReq.cancelled = true; };\n    });\n  }\n/**\n * Helper function to search for requests in the list of open requests.\n * @param {?} match\n * @return {?}\n */\nprivate _match(match: string|RequestMatch|RequestMatchFn): TestRequest[] {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.url === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(\n          testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n              (!match.url || testReq.request.url === match.url));\n    }\n  }\n/**\n * Search for requests in the list of open requests, and return all that match\n * without asserting anything about the number of matches.\n * @param {?} match\n * @return {?}\n */\nmatch(match: string|RequestMatch|RequestMatchFn): TestRequest[] {\n    const /** @type {?} */ results = this._match(match);\n    results.forEach(result => {\n      const /** @type {?} */ index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n/**\n * Expect that a single outstanding request matches the given matcher, and return\n * it.\n * \n * Requests returned through this API will no longer be in the list of open requests,\n * and thus will not match twice.\n * @param {?} match\n * @return {?}\n */\nexpectOne(match: string|RequestMatch|RequestMatchFn): TestRequest {\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(`Expected one matching request, found ${matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      throw new Error(`Expected one matching request, found none.`);\n    }\n    return matches[0];\n  }\n/**\n * Expect that no outstanding requests match the given matcher, and throw an error\n * if any do.\n * @param {?} match\n * @return {?}\n */\nexpectNone(match: string|RequestMatch|RequestMatchFn): void {\n    const /** @type {?} */ matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(`Expected zero matching requests, found ${matches.length}.`);\n    }\n  }\n/**\n * Validate that there are no outstanding requests.\n * @param {?=} opts\n * @return {?}\n */\nverify(opts: VerifyOptions = {}): void {\n    let /** @type {?} */ open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the URLs of open requests in the error, for convenience.\n      const /** @type {?} */ urls = open.map(testReq => testReq.request.url.split('?')[0]).join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${urls}`);\n    }\n  }\n}\n\nfunction HttpClientTestingBackend_tsickle_Closure_declarations() {\n/**\n * List of pending requests which have not yet been expected.\n * @type {?}\n */\nHttpClientTestingBackend.prototype.open;\n}\n\n","import {HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaders, HttpRequest, HttpResponse, HttpResponseInit} from '@angular/http/client';\nimport {Observer} from 'rxjs/Observer';\n\n/**\n * Type of all possible mock response bodies.\n */\nexport type TestResponseBody =\n    ArrayBuffer | Blob | string | number | Object | (string | number | Object | null)[];\n\n/**\n * Options to the flush() interface for responding to requests.\n *\n * @experimental\n */\nexport interface FlushOptions {\n  /**\n   * A set of response headers to include.\n   */\n  headers?: HttpHeaders|{[name: string]: string | string[]};\n\n  /**\n   * HTTP status code of the response (defaults to 200).\n   */\n  status?: number;\n\n  /**\n   * HTTP status text of the response (defaults to 'OK').\n   */\n  statusText?: string;\n}\n/**\n * A mock requests that was received and is ready to be answered.\n * \n * This interface allows access to the underlying {\\@link HttpRequest}, and allows\n * responding with {\\@link HttpEvent}s or {\\@link HttpErrorResponse}s.\n * \n * \\@experimental\n */\nexport class TestRequest {\n/**\n * Whether the request was cancelled after it was sent.\n */\ncancelled = false;\n/**\n * @param {?} request\n * @param {?} observer\n */\nconstructor(public request: HttpRequest<any>,\nprivate observer: Observer<HttpEvent<any>>) {}\n/**\n * @param {?} body\n * @param {?=} opts\n * @return {?}\n */\nflush(body: TestResponseBody|null, opts: FlushOptions = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const /** @type {?} */ url = this.request.url;\n    const /** @type {?} */ headers = new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let /** @type {?} */ statusText: string|undefined = opts.statusText;\n    let /** @type {?} */ status: number = opts.status !== undefined ? opts.status : 200;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    const /** @type {?} */ res: HttpResponseInit<any> = {body, headers, status, statusText, url};\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse<any>(res));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse(res));\n    }\n  }\n/**\n * @param {?} error\n * @param {?=} opts\n * @return {?}\n */\nerror(error: ErrorEvent, opts: FlushOptions = {}): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers: new HttpHeaders(opts.headers),\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.url,\n    }));\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nevent(event: HttpEvent<any>): void {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n\nfunction TestRequest_tsickle_Closure_declarations() {\n/**\n * Whether the request was cancelled after it was sent.\n * @type {?}\n */\nTestRequest.prototype.cancelled;\n/** @type {?} */\nTestRequest.prototype.request;\n/** @type {?} */\nTestRequest.prototype.observer;\n}\n\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(body: TestResponseBody): ArrayBuffer {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(body: TestResponseBody): Blob {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(body: TestResponseBody, format: string = 'JSON'): Object|string|number|\n    (Object | string | number)[] {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n      Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(body: TestResponseBody): string {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(responseType: string, body: TestResponseBody | null): TestResponseBody|\n    null {\n  switch (responseType) {\n    case 'arraybuffer':\n      if (body === null) {\n        return null;\n      }\n      return _toArrayBufferBody(body);\n    case 'blob':\n      if (body === null) {\n        return null;\n      }\n      return _toBlob(body);\n    case 'json':\n      if (body === null) {\n        return 'null';\n      }\n      return _toJsonBody(body);\n    case 'text':\n      if (body === null) {\n        return null;\n      }\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n","import {HttpRequest} from '@angular/http/client';\n\nimport {TestRequest} from './request';\n\n/**\n * Defines a matcher for requests based on URL, method, or both.\n *\n * @experimental\n */\nexport interface RequestMatch {\n  method?: string;\n  url?: string;\n}\n\n/**\n * Configures special verification behaviors.\n *\n * @experimental\n */\nexport interface VerifyOptions {\n  /**\n   * Sets whether to ignore cancelled requests when verifying.\n   */\n  ignoreCancelled?: boolean;\n}\n\n/**\n * Type signature of a function which takes a {@link HttpRequest} and\n * determines whether it matches some predicate.\n *\n * @experimental\n */\nexport type RequestMatchFn = (req: HttpRequest<any>) => boolean;\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class HttpTestingController {\n/**\n * Search for requests that match the given parameter, without any expectations.\n * @abstract\n * @param {?} match\n * @return {?}\n */\nmatch(match: string|RequestMatch|RequestMatchFn) {}\n/**\n * @abstract\n * @param {?} url\n * @return {?}\n */\nexpectOne(url: string) {}\n/**\n * @abstract\n * @param {?} params\n * @return {?}\n */\nexpectOne(params: RequestMatch) {}\n/**\n * @abstract\n * @param {?} matchFn\n * @return {?}\n */\nexpectOne(matchFn: RequestMatchFn) {}\n/**\n * @abstract\n * @param {?} match\n * @return {?}\n */\nexpectOne(match: string|RequestMatch|RequestMatchFn) {}\n/**\n * @abstract\n * @param {?} url\n * @return {?}\n */\nexpectNone(url: string) {}\n/**\n * @abstract\n * @param {?} params\n * @return {?}\n */\nexpectNone(params: RequestMatch) {}\n/**\n * @abstract\n * @param {?} matchFn\n * @return {?}\n */\nexpectNone(matchFn: RequestMatchFn) {}\n/**\n * @abstract\n * @param {?} match\n * @return {?}\n */\nexpectNone(match: string|RequestMatch|RequestMatchFn) {}\n/**\n * @abstract\n * @param {?=} opts\n * @return {?}\n */\nverify(opts?: VerifyOptions) {}\n}\n"],"names":[],"mappings":"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"}